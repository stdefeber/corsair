// Created with Corsair v{{ corsair_ver }}
//
// Wishbone to Local Bus bridge
//

module {{ module_name }} #(
    parameter ADDR_W = {{ config['address_width'] }},
    parameter DATA_W = {{ config['data_width'] }},
    parameter STRB_W = DATA_W / 8
)(
    input clk,
    input rst,
    // Local Bus
    input                     wready,
    output       [ADDR_W-1:0] waddr,
    output       [DATA_W-1:0] wdata,
    output                    wen,
    output       [STRB_W-1:0] wstrb,
    input        [DATA_W-1:0] rdata,
    input                     rvalid,
    output       [ADDR_W-1:0] raddr,
    output                    ren,
{% macro wb_core(regmap_embed=False) %}
    // Wishbone 
    input  [ADDR_W-1:0] wb_adr_i,
    input  [DATA_W-1:0] wb_dat_i,
    input               wb_we_i, 
    input               wb_stb_i,  
    input               wb_cyc_i,  
    input  [STRB_W-1:0] wb_sel_i,
    output [DATA_W-1:0] wb_dat_o,
    output              wb_ack_o  
);

reg [1:0] c_state;
parameter s_idle=0, s_write=1, s_read=2;

{% if regmap_embed %}

wire              wready;
wire [ADDR_W-1:0] waddr;
wire [DATA_W-1:0] wdata;
wire              wen;
wire [STRB_W-1:0] wstrb;
wire [DATA_W-1:0] rdata;
wire              rvalid;
wire [ADDR_W-1:0] raddr;
wire              ren;
{% endif %}

  assign waddr = wb_adr_i;
  assign raddr = wb_adr_i;


  assign wdata = wb_dat_i;
  assign wb_dat_o = rdata;
  assign wstrb = wb_sel_i;
  
  assign wb_ack_o = (c_state == s_write) ? wready :
                  (c_state == s_read) ? rvalid :
                  1'b0;
  
  assign wen = (wb_cyc_i && wb_stb_i && wb_we_i) ? 1'b1 : 1'b0;

  reg ren_int;
  {% set rst_type = config['register_reset']%}
  {%- if rst_type == 'async_pos' or rst_type == 'sync_pos' %}
      {% set rst_active = 1%}
  {%- elif rst_type == 'async_neg' or rst_type == 'sync_neg' %}
      {% set rst_active = 0%}
  {%- endif %}
  always @(posedge clk
  {%- if rst_type == 'async_pos' %} or posedge rst)
  {%- elif rst_type == 'async_neg' %} or negedge rst)
  {%- else -%} ) {%- endif %} begin
    if (rst == 1'b{{ rst_active }})
      ren_int <= 1'b0;
    else
    begin
      if (!rvalid && wb_cyc_i && wb_stb_i && !wb_we_i)
         ren_int <= 1'b1;
      else
        if (rvalid)
          ren_int <= 1'b0;
    end
  end

  assign ren = ren_int;
  
  {% set rst_type = config['register_reset']%}
  {%- if rst_type == 'async_pos' or rst_type == 'sync_pos' %}
      {% set rst_active = 1%}
  {%- elif rst_type == 'async_neg' or rst_type == 'sync_neg' %}
      {% set rst_active = 0%}
  {%- endif %}
  always @(posedge clk
  {%- if rst_type == 'async_pos' %} or posedge rst)
  {%- elif rst_type == 'async_neg' %} or negedge rst)
  {%- else -%} ) {%- endif %} begin
    if (rst == 1'b{{ rst_active }})
      c_state = s_idle;
    else begin 
      case (c_state)
        s_idle:
           if (wb_cyc_i && wb_stb_i) begin
             if (wb_we_i)
               c_state = s_write;
             else  
               c_state = s_read;
           end
        s_write:
           if (wready)
             c_state = s_idle;
        s_read:
           if (rvalid)
             c_state <= s_idle;
      endcase
    end  
  end

{% endmacro %}
{{ wb_core() }}
endmodule
